PROJECT(PlusBuild)
#
# Configure the build to work (although with limited functionalities) if only
# src directory of the repository is available
# 
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
IF(COMMAND cmake_policy)
    cmake_policy(SET CMP0003 NEW)
ENDIF(COMMAND cmake_policy)

#-----------------------------------------------------------------------------
# SVN - Let's check if a valid version of SVN is available
#-----------------------------------------------------------------------------
# Need subversion for the automatic update of the repository
MARK_AS_ADVANCED(CLEAR Subversion_SVN_EXECUTABLE)
FIND_FILE(Subversion_SVN_EXECUTABLE svn${CMAKE_EXECUTABLE_SUFFIX} PATHS "C:/cygwin/bin/" )
find_package(Subversion REQUIRED)

SET(PLUSBUILD_ASSEMBLA_USERNAME "PLUSBUILD_ASSEMBLA_USERNAME-NOT-FOUND" CACHE STRING "Username for Plus assembla server: https://subversion.assembla.com/svn/plus/" )
SET(PLUSBUILD_ASSEMBLA_PASSWORD "PLUSBUILD_ASSEMBLA_PASSWORD-NOT-FOUND" CACHE STRING "Password for Plus assembla server: https://subversion.assembla.com/svn/plus/" )

#-----------------------------------------------------------------------------
# GIT - Let's check if a valid version of GIT is available
#-----------------------------------------------------------------------------
# Need Git for the automatic update of the repository
MARK_AS_ADVANCED(CLEAR GIT_EXECUTABLE)
FIND_FILE(GIT_EXECUTABLE git${CMAKE_EXECUTABLE_SUFFIX} PATHS "C:/cygwin/bin/" )
FIND_PACKAGE(Git)
IF(NOT GIT_FOUND)
  MESSAGE(FATAL_ERROR "error: Install Git and try to re-configure")
ENDIF() 

#-----------------------------------------------------------------------------
# Qt - Let's check if a valid version of Qt is available
#-----------------------------------------------------------------------------
FIND_FILE(QT_QMAKE_EXECUTABLE qmake${CMAKE_EXECUTABLE_SUFFIX} $ENV{QTDIR} )
FIND_PACKAGE(Qt4 REQUIRED)
SET(QT_USE_QT3SUPPORT TRUE) 
INCLUDE(${QT_USE_FILE})

#INCLUDE(SlicerBlockFindQtAndCheckVersion)


OPTION(PLUSBUILD_USE_PLTools "Use the PLTools repository" ON)
OPTION(PLUSBUILD_USE_OpenIGTLink "Use OpenIGTLink" ON)

#-----------------------------------------------------------------------------
# Enable and setup External project global properties
#-----------------------------------------------------------------------------
INCLUDE(${CMAKE_ROOT}/Modules/ExternalProject.cmake)

SET(ep_common_args
  #-DCMAKE_INSTALL_PREFIX:PATH=${ep_install_dir}
  -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
  -DBUILD_TESTING:BOOL=OFF
  )

SET(ep_common_c_flags "${CMAKE_C_FLAGS_INIT} ${ADDITIONAL_C_FLAGS}")
SET(ep_common_cxx_flags "${CMAKE_CXX_FLAGS_INIT} ${ADDITIONAL_CXX_FLAGS}")
  
# Compute -G arg for configuring external projects with the same CMake generator:
IF(CMAKE_EXTRA_GENERATOR)
  SET(gen "${CMAKE_EXTRA_GENERATOR} - ${CMAKE_GENERATOR}")
ELSE()
  SET(gen "${CMAKE_GENERATOR}")
ENDIF()

#------------------------------------------------------------------------------
# Establish Target Dependencies based on Selected Options
#------------------------------------------------------------------------------

SET(VTK_DEPENDENCIES)

SET(ITK_DEPENDENCIES)

SET(PlusLib_DEPENDENCIES vtk itk)

IF(PLUSBUILD_USE_OpenIGTLink)
    SET(OpenIGTLink_DEPENDENCIES)
    LIST(APPEND PlusLib_DEPENDENCIES OpenIGTLink)
ENDIF(PLUSBUILD_USE_OpenIGTLink)

IF(PLUSBUILD_USE_PLTools)
    LIST(APPEND PlusLib_DEPENDENCIES PLTools)
ENDIF(PLUSBUILD_USE_PLTools) 

SET(PlusApp_DEPENDENCIES PlusLib)

#------------------------------------------------------------------------------
# Conditionnaly include ExternalProject Target
#------------------------------------------------------------------------------

INCLUDE(External_VTK.cmake)

INCLUDE(External_ITK.cmake)

IF(PLUSBUILD_USE_OpenIGTLink)
    INCLUDE(External_OpenIGTLink.cmake)
ENDIF(PLUSBUILD_USE_OpenIGTLink)

IF(PLUSBUILD_USE_PLTools)
    INCLUDE(External_PLTools.cmake)
ENDIF(PLUSBUILD_USE_PLTools)    

INCLUDE(External_PlusLib.cmake)

IF(PLUSBUILD_BUILD_PLUSAPP) 
    INCLUDE(External_PlusApp.cmake)
ENDIF(PLUSBUILD_BUILD_PLUSAPP)    

