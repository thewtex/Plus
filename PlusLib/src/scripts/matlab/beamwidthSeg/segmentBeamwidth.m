function segmentBeamwidth(originalImage,         ...
                          f_path,                ...
                          f_index,               ...
                          p_USE_medianFilter,    ... % added
                          p_USE_blurFilter,      ... % added
                          p_USE_stickFilter,     ... % added
                          p_medianFilterSize,    ...
                          p_blurFilterSize,      ... % added
                          p_blurFilterSigma,     ... % added
                          p_stickFilterLength,   ... % added
                          p_stickFilterWidth,    ... % added
                          g_GradientMatrix,      ...
                          h_numberLinesToFind,   ...
                          h_dtheta,              ...
                          h_drho,                ...
                          h_thresholdMultiplier, ...
                          h_neighborhood,        ...
                          h_fillgap,             ...
                          h_minlength,           ...
                          l_searchArea,          ...
                          l_transducerArea,      ...
                          l_minNumLines,         ...
                          l_scoringThreshold)

    % Create file names
    [lname sname tname] = generateFileNames(f_path,f_index);

    % Load image
    image = double(originalImage);
    image = image(:,:,1);
    
    % Preprocessor
    for i = 1:1:3
        if (i == p_USE_medianFilter)
            image = medfilt2(image,p_medianFilterSize, 'symmetric');
        elseif (i == p_USE_blurFilter)
            image = preprocessBlur(image,p_blurFilterSize,p_blurFilterSigma);
        elseif (i == p_USE_stickFilter)
            image = sf(image,p_stickFilterLength,p_stickFilterWidth);
        end
    end    
    
    % Gradient application
    image = imfilter(image,g_GradientMatrix,'symmetric');
    image = abs(image);

    % Hough Line Detection
    [houghTransform theta rho] = hough(image,...
               'ThetaResolution', h_dtheta, ...
               'RhoResolution', h_drho); %#ok<HOUGH>
    hpeaks = houghpeaks(houghTransform, h_numberLinesToFind,...
               'Threshold',h_thresholdMultiplier*max(houghTransform(:)),...
               'NHoodSize',h_neighborhood);
    houghLs = houghlines(originalImage,theta,rho,hpeaks,...
               'FillGap',h_fillgap,...
               'MinLength',h_minlength);

    % Line Selection
    [ beamBoundaries candidates scores dscores hscores iscores ] = ...
        lineSelector(originalImage,houghLs,l_searchArea, ...
                     l_transducerArea,l_minNumLines,l_scoringThreshold);

    % Visualize the lines on the original image
    writeImage( lname, originalImage, candidates, 0 );
    writeImage( sname, originalImage, beamBoundaries, 1 );
    writeLineData( tname, scores, dscores, hscores, iscores, candidates);

end
