function segmentBeamwidth(originalImage,         ...
                          f_path,                ...
                          f_index,               ...
                          p_medianFilterSize,    ...
                          p_GradientMatrix,      ...
                          h_numberLinesToFind,   ...
                          h_dtheta,              ...
                          h_drho,                ...
                          h_thresholdMultiplier, ...
                          h_neighborhood,        ...
                          h_fillgap,             ...
                          h_minlength,           ...
                          l_searchArea,          ...
                          l_transducerArea,      ...
                          l_minNumLines,         ...
                          l_scoringThreshold)

    % Create file names
    [lname sname tname] = generateFileNames(f_path,f_index);

    % Preprocessor
    image = double(originalImage);
    image = image(:,:,1);
    image = medfilt2(image,[p_medianFilterSize p_medianFilterSize], 'symmetric');
    image = imfilter(image,p_GradientMatrix,'symmetric');
    image = abs(image);
    
%     % TODO Remove this short section
%     figure;
%     imshow(image,[min(image(:)),max(image(:))]);
%     return;
    
    % Hough Operations
    % Process h_dtheta as per the process outlined by
    % Rafael C. Gonzalez
    % Richard E. Woods
    % Steven L. Eddubs
    % Digital Image Processing Using MATLAB, Pearson/Prentice Hall 2004
    
    
    [houghTransform theta rho] = hough(image,...
               'ThetaResolution', h_dtheta, ...
               'RhoResolution', h_drho); %#ok<HOUGH>
           imshow(houghTransform,[min(houghTransform(:)),max(houghTransform(:))]);
           figure;
%            houghTransform


%     [houghTransform theta rho] = hough(image',h_dtheta,h_drho);
%            imshow(houghTransform,[min(houghTransform(:)),max(houghTransform(:))]);
%            figure;

%     [r c] = houghpeaks(houghTransform, h_numberLinesToFind,...
%         h_thresholdMultiplier*max(houghTransform(:)),h_neighborhood);
%     houghLs = houghlines(originalImage,theta,rho,r,c,...
%                h_fillgap,h_minlength);
%     hTheta = linspace(-90, 0, ceil(90/h_dtheta)+1);
%     hTheta = [hTheta -fliplr(hTheta(2:end-1))];
%     [houghTransform theta rho] = hough(image,...
%                'Theta', hTheta, ...
%                'RhoResolution', h_drho);
    hpeaks = houghpeaks(houghTransform, h_numberLinesToFind,...
               'Threshold',h_thresholdMultiplier*max(houghTransform(:)),...
               'NHoodSize',h_neighborhood);
    houghLs = houghlines(originalImage,theta,rho,hpeaks,...
               'FillGap',h_fillgap,...
               'MinLength',h_minlength);

    % Find the beamwidth from the possible lines
    [ beamBoundaries candidates scores dscores hscores iscores ] = ...
        lineSelector(originalImage,houghLs,l_searchArea, ...
                     l_transducerArea,l_minNumLines,l_scoringThreshold);

    % Visualize the lines on the original image
    writeImage( lname, originalImage, candidates, 0 );
    writeImage( sname, originalImage, beamBoundaries, 1 );
    writeLineData( tname, scores, dscores, hscores, iscores, candidates);

end
